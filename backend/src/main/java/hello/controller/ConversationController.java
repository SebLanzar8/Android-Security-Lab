package hello.controller;

import hello.dbStructure.Conversation;
import hello.repositories.ConversationRepository;
import hello.repositories.MessageRepository;
import hello.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.UnsatisfiedServletRequestParameterException;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collector;
import java.util.stream.Collectors;

@RestController
public class ConversationController {

    @Autowired // Which is auto-generated by Spring, we will use it to handle the data
    private ConversationRepository conversationRepository;
    @Autowired
    private UserRepository userRepository;

    @GetMapping("/getConversation")
    public ArrayList<Conversation> getConversation(@CookieValue("sessionToken") String sessionToken) {

        if(sessionToken == null){
            return null;
        }

        int id = userRepository.getId(sessionToken);
        Collection<Integer> conversations = conversationRepository.getMyConversations(id);
        ArrayList<Conversation> query =
                conversations.stream()
                        .map(x -> conversationRepository.getConversations(x))
                        .collect(Collectors.toCollection(ArrayList<Conversation>::new));


        return query;

    }

    class ResponseNewConv{
        private int idConversation;

        public ResponseNewConv(int idConversation){
            this.idConversation = idConversation;
        }

        public int getIdConversation() {
            return idConversation;
        }

        public void setIdConversation(int idConversation) {
            this.idConversation = idConversation;
        }
    }
    @PostMapping("/newConversation")
    @ResponseBody
    public Conversation newConversation (@RequestBody Map<String, String> payload,@CookieValue("sessionToken") String sessionToken) {

        if(sessionToken == null){
            return null;
        }

        int idTo = userRepository.getId(payload.get("to"));
            int id = userRepository.getId(sessionToken);

         Conversation response = conversationRepository.checkDoubleConv(id ,idTo);
         if(response != null)
             return response;

        response = new Conversation();
        response.setIdSender(id);
        response.setIdReceiver(idTo);

        return conversationRepository.save(response);


    }

}
